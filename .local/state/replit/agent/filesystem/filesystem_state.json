{"file_contents":{"client/src/components/ConfirmationSummary.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle2 } from \"lucide-react\";\n\ninterface PlantSummary {\n  commonName: string;\n  scientificName?: string;\n  quantity?: number;\n  datePlanted?: string;\n  sunExposure?: string;\n  healthStatus?: string;\n  notes?: string;\n}\n\ninterface ConfirmationSummaryProps {\n  bedName: string;\n  plant: PlantSummary;\n  onSave: () => void;\n  onEdit: () => void;\n  onCancel: () => void;\n}\n\nexport function ConfirmationSummary({\n  bedName,\n  plant,\n  onSave,\n  onEdit,\n  onCancel,\n}: ConfirmationSummaryProps) {\n  return (\n    <Card className=\"border-primary/50\" data-testid=\"card-confirmation\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n          Ready to Save\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <div>\n          <h3 className=\"font-display text-lg font-semibold\" data-testid=\"text-bed-name\">\n            {bedName}\n          </h3>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-baseline gap-2\">\n            <span className=\"text-2xl font-display text-primary\" data-testid=\"text-plant-name\">\n              {plant.commonName}\n            </span>\n            {plant.scientificName && (\n              <span className=\"text-sm font-mono italic text-muted-foreground\" data-testid=\"text-scientific-name\">\n                ({plant.scientificName})\n              </span>\n            )}\n          </div>\n\n          <div className=\"grid gap-2 text-sm\">\n            {plant.quantity && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Quantity:</span>\n                <span className=\"font-medium\" data-testid=\"text-quantity\">{plant.quantity}</span>\n              </div>\n            )}\n            {plant.datePlanted && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Planted:</span>\n                <span className=\"font-medium\" data-testid=\"text-date-planted\">{plant.datePlanted}</span>\n              </div>\n            )}\n            {plant.sunExposure && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Sun:</span>\n                <span className=\"font-medium\" data-testid=\"text-sun-exposure\">{plant.sunExposure}</span>\n              </div>\n            )}\n            {plant.healthStatus && (\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Status:</span>\n                <Badge variant=\"outline\" className=\"bg-chart-2/20 text-chart-2\" data-testid=\"badge-health-status\">\n                  {plant.healthStatus}\n                </Badge>\n              </div>\n            )}\n            {plant.notes && (\n              <div className=\"pt-2 border-t\">\n                <p className=\"text-muted-foreground text-xs mb-1\">Notes:</p>\n                <p className=\"text-sm\" data-testid=\"text-notes\">{plant.notes}</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex gap-2 flex-wrap\">\n        <Button onClick={onSave} className=\"flex-1\" data-testid=\"button-save\">\n          Save to Catalog\n        </Button>\n        <Button onClick={onEdit} variant=\"outline\" data-testid=\"button-edit\">\n          Edit\n        </Button>\n        <Button onClick={onCancel} variant=\"ghost\" data-testid=\"button-cancel\">\n          Cancel\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":3750},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"design_guidelines.md":{"content":"# Design Guidelines: Intelligent Garden Cataloging Chatbot\n\n## Design Approach\n\n**Primary Strategy**: Hybrid approach combining Material Design principles with nature-inspired aesthetics drawn from successful gardening apps (Garden Answers, PlantSnap) and conversational interfaces (ChatGPT, Intercom).\n\n**Rationale**: This is a utility tool requiring clear information hierarchy and reliable patterns, but the subject matter (gardening) demands warmth and organic visual elements that inspire engagement with nature.\n\n## Color Palette\n\n### Light Mode\n- **Primary**: 142 65% 45% (Garden Green - sage-toned, professional yet natural)\n- **Secondary**: 88 50% 55% (Fresh Leaf - bright accent for success states)\n- **Background**: 60 8% 98% (Warm Off-white)\n- **Surface**: 0 0% 100% (Pure white for cards/chat bubbles)\n- **Text Primary**: 140 10% 15% (Deep forest green-gray)\n- **Text Secondary**: 140 5% 45% (Muted sage)\n- **Borders**: 140 10% 90% (Subtle green-tinted gray)\n\n### Dark Mode\n- **Primary**: 142 45% 55% (Lighter garden green)\n- **Secondary**: 88 40% 60% (Muted fresh accent)\n- **Background**: 140 15% 8% (Deep forest floor)\n- **Surface**: 140 12% 12% (Elevated dark surface)\n- **Text Primary**: 60 5% 95% (Warm off-white)\n- **Text Secondary**: 140 5% 70% (Muted light sage)\n- **Borders**: 140 8% 20% (Subtle dark border)\n\n### Status Colors\n- **Success/Thriving**: 88 60% 50% (Vibrant green)\n- **Warning/OK**: 45 90% 60% (Golden sunlight)\n- **Error/Struggling**: 15 75% 55% (Terracotta warning)\n- **Info**: 200 70% 50% (Sky blue for neutral information)\n\n## Typography\n\n**Font Stack**: \n- **Primary**: 'Inter' (Google Fonts) - Clean, highly legible for chat interface\n- **Display**: 'Raleway' (Google Fonts) - For headers and plant names\n- **Monospace**: 'JetBrains Mono' (Google Fonts) - For scientific names\n\n**Scale**:\n- **Display (Plant Names)**: text-3xl (30px), font-semibold, font-display\n- **Heading 1**: text-2xl (24px), font-semibold\n- **Heading 2**: text-xl (20px), font-medium\n- **Body**: text-base (16px), font-normal\n- **Small/Meta**: text-sm (14px), font-normal\n- **Tiny/Timestamps**: text-xs (12px), font-normal\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 8, 12, 16, 24 for consistency\n- Component padding: p-4 or p-6\n- Section spacing: gap-8 or gap-12\n- Tight spacing: gap-2 or gap-4\n\n**Container Widths**:\n- Chat interface: max-w-4xl (optimal reading width for conversation)\n- Plant cards: max-w-sm to max-w-md\n- Full catalog view: max-w-7xl\n\n## Component Library\n\n### Chat Interface\n**Message Bubbles**:\n- User messages: Right-aligned, primary green background, white text, rounded-2xl, max-w-md, p-4\n- Bot messages: Left-aligned, surface background with border, primary text, rounded-2xl, max-w-lg, p-4\n- Include small avatar icons (🌱 for bot, user initial or 👤 for user)\n- Timestamps: text-xs, text-secondary, mt-1\n- Typing indicator: Three animated dots in bot bubble style\n\n**Input Area**:\n- Fixed bottom position with backdrop-blur\n- Rounded-xl text area with border-2 border-primary/20\n- Photo upload button with camera icon (left side)\n- Send button with arrow icon (right side, primary green when text present)\n- Min height: 56px, auto-expand to max 120px\n\n### Plant Identification Cards\n**High Confidence Card** (>85%):\n- Large plant photo (aspect-ratio-square or 4:3), rounded-lg\n- Confidence badge: Top-right overlay, green bg, \"92% Match\"\n- Plant name: Display font, text-2xl, primary color\n- Scientific name: Monospace font, text-sm, italic, text-secondary\n- Quick stats grid: 2 columns, icons + labels (type, light, size)\n- \"Add to Garden\" CTA: Primary button, w-full\n\n**Medium Confidence Card** (60-85%):\n- Smaller photo (aspect-ratio-video), rounded-md\n- Three suggestion cards in vertical stack\n- Each with: Name, confidence %, expandable details\n- \"Need more info\" helper text\n- Secondary buttons for selection\n\n**Low Confidence Card** (<60%):\n- Photo thumbnail with question mark overlay\n- \"Help us identify\" prompt\n- Quick questions in chip format (sun/shade? flower color?)\n- Text input for user description\n\n### Garden Bed Cards\n- Header: Bed name (h2) + edit icon\n- Metadata row: Sun icon + exposure, droplet + moisture, ruler + size\n- Plant list: Compact cards with thumbnail, name, quantity, health dot\n- Footer: \"Add Plant\" button + \"View Details\" link\n- Hover: Subtle lift (shadow-lg) and border highlight\n\n### Navigation & Layout\n**Top Bar**:\n- Logo/brand: 🌱 Garden Catalog (left)\n- Navigation: My Beds, All Plants, Profile (center, hidden on mobile)\n- Mobile: Hamburger menu (right)\n- Height: h-16, border-b, backdrop-blur-md, sticky top-0\n\n**Sidebar** (Desktop only, ≥1024px):\n- Width: w-64\n- Garden beds list with plant counts\n- \"New Bed\" button at bottom\n- Collapsible for more chat space\n\n**Mobile Bottom Nav**:\n- Fixed bottom bar with 4 icons: Chat, Beds, Plants, Profile\n- Active state: primary color + filled icon\n- Height: h-16, safe-area-inset-bottom padding\n\n### Status Indicators\n**Health Status Dots**:\n- Thriving: Large dot (h-3 w-3), success green, with pulse animation\n- OK: Medium dot (h-2.5 w-2.5), warning yellow\n- Struggling: Medium dot, error terracotta\n- Dead: Small dot (h-2 w-2), gray-400\n\n**Confidence Badges**:\n- High: Green background, \"✓ 92% Match\"\n- Medium: Yellow background, \"~ 68% Match\"\n- Low: Gray background, \"? 45% Match\"\n- Rounded-full, px-3, py-1, text-xs, font-medium\n\n### Photo Upload Zone\n**Dropzone**:\n- Dashed border (border-dashed border-2 border-primary/30)\n- Large camera icon (text-6xl, text-primary/40)\n- \"Drop photo or click to upload\" text\n- Rounded-xl, p-12, hover:bg-primary/5 transition\n- Image preview: Rounded-lg, max-h-80, with \"Change\" button overlay\n\n### Data Display\n**Plant Details Panel**:\n- Hero image at top (aspect-ratio-16/9)\n- Floating back button (top-left)\n- Name + scientific name (overlay on image with gradient backdrop)\n- Tabbed sections: Details, Care, History, Photos\n- Timeline view for plant history (planted → milestones → current)\n\n**Timeline Component**:\n- Vertical line connecting nodes (border-l-2 border-primary/20)\n- Date nodes: Circle with icon, connected to line\n- Event cards: Offset from line, rounded-lg, surface bg, shadow-sm\n\n## Images\n\n**Hero Section**: Not applicable - this is a utility app, not a marketing site. The chat interface is the primary view.\n\n**Plant Photos**:\n- User-uploaded photos: Display actual garden photos with EXIF preservation\n- Placeholder images: Use botanical illustration style or subtle leaf patterns in primary green tones\n- Loading states: Skeleton with animated shimmer effect\n\n**Empty States**:\n- No beds yet: Illustration of person planting in garden (friendly, simple line art style)\n- No plants in bed: Small potted plant illustration with \"Add your first plant\" prompt\n- No chat history: Welcome illustration with 🌱 icon and conversation starter examples\n\n## Animations\n\n**Minimal & Purposeful**:\n- Message send: Fade-in-up (duration-200)\n- Photo upload: Scale-in (duration-150)\n- Confidence badge: Subtle pulse for high confidence only\n- Health status dot: Pulse animation for \"thriving\" plants only\n- Skeleton loading: Shimmer effect for content loading states\n- **No** scroll-triggered animations, **no** decorative transitions\n\n## Responsive Breakpoints\n\n- **Mobile-first**: Base styles for mobile (chat-optimized)\n- **md (768px)**: Side-by-side plant cards, show more metadata\n- **lg (1024px)**: Sidebar navigation, multi-column catalog grid\n- **xl (1280px)**: Max content width, comfortable spacing\n\n## Key UX Patterns\n\n1. **Progressive Disclosure**: Start with simple questions, reveal advanced fields only for power users\n2. **Contextual Help**: Inline tooltips for scientific terms, expandable info cards\n3. **Smart Defaults**: Pre-fill sun exposure from location clues, suggest bed names\n4. **Undo/Edit**: Every saved entry has quick edit and undo options\n5. **Offline Indicators**: Toast notification if photo upload fails, queue for retry\n6. **Success Feedback**: Gentle confirmation toasts (top-right, 3s duration) with undo action","size_bytes":8076},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 60 4% 98%;\n\n  --foreground: 140 8% 18%;\n\n  --border: 140 6% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 140 8% 18%;\n\n  --card-border: 140 5% 94%;\n\n  --sidebar: 60 5% 96%;\n\n  --sidebar-foreground: 140 8% 20%;\n\n  --sidebar-border: 140 5% 90%;\n\n  --sidebar-primary: 145 70% 50%;\n\n  --sidebar-primary-foreground: 145 20% 98%;\n\n  --sidebar-accent: 145 15% 88%;\n\n  --sidebar-accent-foreground: 140 8% 22%;\n\n  --sidebar-ring: 145 70% 50%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 140 8% 18%;\n\n  --popover-border: 140 5% 92%;\n\n  --primary: 145 70% 50%;\n\n  --primary-foreground: 145 20% 98%;\n\n  --secondary: 140 8% 92%;\n\n  --secondary-foreground: 140 8% 20%;\n\n  --muted: 142 10% 94%;\n\n  --muted-foreground: 140 8% 40%;\n\n  --accent: 142 15% 90%;\n\n  --accent-foreground: 140 8% 22%;\n\n  --destructive: 15 75% 48%;\n\n  --destructive-foreground: 15 20% 98%;\n\n  --input: 140 10% 75%;\n  --ring: 145 70% 50%;\n  --chart-1: 145 70% 50%;\n  --chart-2: 88 50% 48%;\n  --chart-3: 200 70% 45%;\n  --chart-4: 45 90% 55%;\n  --chart-5: 15 75% 50%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(140 10% 15% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(140 10% 15% / 0.03);\n  --shadow-sm: 0px 2px 0px 0px hsl(140 10% 15% / 0.04), 0px 1px 2px -1px hsl(140 10% 15% / 0.06);\n  --shadow: 0px 2px 0px 0px hsl(140 10% 15% / 0.04), 0px 1px 2px -1px hsl(140 10% 15% / 0.06);\n  --shadow-md: 0px 2px 0px 0px hsl(140 10% 15% / 0.04), 0px 2px 4px -1px hsl(140 10% 15% / 0.08);\n  --shadow-lg: 0px 2px 0px 0px hsl(140 10% 15% / 0.04), 0px 4px 6px -1px hsl(140 10% 15% / 0.10);\n  --shadow-xl: 0px 2px 0px 0px hsl(140 10% 15% / 0.04), 0px 8px 10px -1px hsl(140 10% 15% / 0.12);\n  --shadow-2xl: 0px 2px 0px 0px hsl(140 10% 15% / 0.08);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 140 6% 8%;\n\n  --foreground: 60 5% 92%;\n\n  --border: 140 6% 18%;\n\n  --card: 140 5% 11%;\n\n  --card-foreground: 60 5% 92%;\n\n  --card-border: 140 5% 16%;\n\n  --sidebar: 140 5% 14%;\n\n  --sidebar-foreground: 60 5% 90%;\n\n  --sidebar-border: 140 5% 20%;\n\n  --sidebar-primary: 145 55% 60%;\n\n  --sidebar-primary-foreground: 145 15% 95%;\n\n  --sidebar-accent: 145 12% 22%;\n\n  --sidebar-accent-foreground: 60 5% 88%;\n\n  --sidebar-ring: 145 55% 60%;\n\n  --popover: 140 5% 16%;\n\n  --popover-foreground: 60 5% 90%;\n\n  --popover-border: 140 5% 22%;\n\n  --primary: 145 60% 55%;\n\n  --primary-foreground: 145 15% 95%;\n\n  --secondary: 140 8% 20%;\n\n  --secondary-foreground: 60 5% 88%;\n\n  --muted: 142 8% 18%;\n\n  --muted-foreground: 140 6% 70%;\n\n  --accent: 142 10% 20%;\n\n  --accent-foreground: 60 5% 88%;\n\n  --destructive: 15 75% 48%;\n\n  --destructive-foreground: 15 15% 95%;\n\n  --input: 140 10% 32%;\n  --ring: 145 60% 55%;\n  --chart-1: 145 60% 65%;\n  --chart-2: 88 45% 68%;\n  --chart-3: 200 60% 70%;\n  --chart-4: 45 85% 72%;\n  --chart-5: 15 70% 68%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(140 10% 0% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(140 10% 0% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(140 10% 0% / 0.25), 0px 1px 2px -1px hsl(140 10% 0% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(140 10% 0% / 0.25), 0px 1px 2px -1px hsl(140 10% 0% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(140 10% 0% / 0.25), 0px 2px 4px -1px hsl(140 10% 0% / 0.35);\n  --shadow-lg: 0px 2px 0px 0px hsl(140 10% 0% / 0.25), 0px 4px 6px -1px hsl(140 10% 0% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(140 10% 0% / 0.25), 0px 8px 10px -1px hsl(140 10% 0% / 0.45);\n  --shadow-2xl: 0px 2px 0px 0px hsl(140 10% 0% / 0.35);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9818},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"client/src/components/ChatInput.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Camera, Send } from \"lucide-react\";\n\ninterface ChatInputProps {\n  onSendMessage: (message: string) => void;\n  onUploadPhoto: () => void;\n  disabled?: boolean;\n}\n\nexport function ChatInput({ onSendMessage, onUploadPhoto, disabled }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n\n  const handleSend = () => {\n    if (message.trim() && !disabled) {\n      onSendMessage(message);\n      setMessage(\"\");\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"sticky bottom-0 border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80 p-4\">\n      <div className=\"max-w-4xl mx-auto flex gap-2 items-end\">\n        <Button\n          size=\"icon\"\n          variant=\"outline\"\n          onClick={onUploadPhoto}\n          disabled={disabled}\n          data-testid=\"button-upload-photo\"\n          className=\"flex-shrink-0\"\n        >\n          <Camera className=\"h-4 w-4\" />\n        </Button>\n\n        <Textarea\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Tell me about your plants or ask a question...\"\n          className=\"min-h-[56px] max-h-[120px] resize-none\"\n          disabled={disabled}\n          data-testid=\"input-message\"\n        />\n\n        <Button\n          size=\"icon\"\n          onClick={handleSend}\n          disabled={disabled || !message.trim()}\n          data-testid=\"button-send\"\n          className=\"flex-shrink-0\"\n        >\n          <Send className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1845},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/BedsPage.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useUser } from \"@/lib/userContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Sprout, MessageSquare, Grid3x3, Pencil, Trash2 } from \"lucide-react\";\nimport type { GardenBed, Plant } from \"@shared/schema\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sun, Droplet, Ruler } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function BedsPage() {\n  const { user } = useUser();\n  const [location] = useLocation();\n  const { toast } = useToast();\n  \n  const [editingBed, setEditingBed] = useState<GardenBed | null>(null);\n  const [editingPlant, setEditingPlant] = useState<Plant | null>(null);\n  const [deletingBed, setDeletingBed] = useState<GardenBed | null>(null);\n  const [deletingPlant, setDeletingPlant] = useState<Plant | null>(null);\n\n  const { data: beds = [], isLoading } = useQuery<GardenBed[]>({\n    queryKey: [\"/api/beds\", user?.id],\n    queryFn: async () => {\n      const res = await fetch(`/api/beds?userId=${user?.id}`);\n      if (!res.ok) {\n        throw new Error('Failed to fetch beds');\n      }\n      return res.json();\n    },\n    enabled: !!user,\n    staleTime: 0,\n    refetchOnMount: 'always',\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: plantsMap = {} } = useQuery<Record<string, Plant[]>>({\n    queryKey: [\"/api/plants/all\", user?.id],\n    queryFn: async () => {\n      if (!beds.length) return {};\n      \n      const results = await Promise.all(\n        beds.map(async (bed) => {\n          const res = await fetch(`/api/plants?bedId=${bed.id}`);\n          const plants = await res.json();\n          return [bed.id, plants];\n        })\n      );\n      \n      return Object.fromEntries(results);\n    },\n    enabled: !!user && beds.length > 0,\n    staleTime: 0,\n    refetchOnMount: 'always',\n    refetchOnWindowFocus: true,\n  });\n\n  const updateBedMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<GardenBed> }) => {\n      return await apiRequest(\"PATCH\", `/api/beds/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/beds\", user?.id] });\n      setEditingBed(null);\n      toast({\n        title: \"Bed updated\",\n        description: \"Your garden bed has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBedMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/beds/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/beds\", user?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/plants/all\", user?.id] });\n      setDeletingBed(null);\n      toast({\n        title: \"Bed deleted\",\n        description: \"The garden bed and its plants have been removed.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePlantMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Plant> }) => {\n      return await apiRequest(\"PATCH\", `/api/plants/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plants/all\", user?.id] });\n      setEditingPlant(null);\n      toast({\n        title: \"Plant updated\",\n        description: \"Your plant has been updated successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePlantMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/plants/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plants/all\", user?.id] });\n      setDeletingPlant(null);\n      toast({\n        title: \"Plant removed\",\n        description: \"The plant has been removed from the bed.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditBed = (bed: GardenBed) => {\n    setEditingBed(bed);\n  };\n\n  const handleSaveBed = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!editingBed) return;\n    \n    const formData = new FormData(e.currentTarget);\n    updateBedMutation.mutate({\n      id: editingBed.id,\n      data: {\n        bedName: formData.get(\"bedName\") as string,\n        sunExposure: formData.get(\"sunExposure\") as string || null,\n        soilType: formData.get(\"soilType\") as string || null,\n        soilMoisture: formData.get(\"soilMoisture\") as string || null,\n        bedSizeSqft: formData.get(\"bedSizeSqft\") ? Number(formData.get(\"bedSizeSqft\")) : null,\n        notes: formData.get(\"notes\") as string || null,\n      },\n    });\n  };\n\n  const handleEditPlant = (plant: Plant) => {\n    setEditingPlant(plant);\n  };\n\n  const handleSavePlant = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!editingPlant) return;\n    \n    const formData = new FormData(e.currentTarget);\n    const quantityValue = formData.get(\"quantity\") as string;\n    const quantity = Number(quantityValue);\n    \n    // Validate quantity\n    if (!quantityValue || isNaN(quantity) || quantity <= 0) {\n      toast({\n        title: \"Invalid quantity\",\n        description: \"Please enter a valid quantity greater than 0.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updatePlantMutation.mutate({\n      id: editingPlant.id,\n      data: {\n        commonName: formData.get(\"commonName\") as string,\n        scientificName: formData.get(\"scientificName\") as string || null,\n        quantity: quantity,\n        healthStatus: formData.get(\"healthStatus\") as string || null,\n        notes: formData.get(\"notes\") as string || null,\n      },\n    });\n  };\n\n  const getHealthColor = (status: string | null) => {\n    switch (status) {\n      case \"thriving\":\n        return \"bg-chart-2\";\n      case \"ok\":\n        return \"bg-chart-4\";\n      case \"struggling\":\n        return \"bg-destructive\";\n      case \"dead\":\n        return \"bg-muted-foreground\";\n      default:\n        return \"bg-chart-4\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-2\">\n          <Sprout className=\"h-8 w-8 text-primary mx-auto animate-pulse\" />\n          <p className=\"text-muted-foreground\">Loading your garden beds...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <header className=\"sticky top-0 z-10 flex items-center justify-between px-4 h-16 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80\">\n        <div className=\"flex items-center gap-2\">\n          <Sprout className=\"h-6 w-6 text-primary\" />\n          <h1 className=\"text-lg font-display font-semibold\">Garden Beds</h1>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <nav className=\"hidden lg:flex items-center gap-1\">\n            <Link href=\"/\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={cn(location === \"/\" && \"bg-accent\")}\n                data-testid=\"nav-chat-desktop\"\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Chat\n              </Button>\n            </Link>\n            <Link href=\"/beds\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={cn(location === \"/beds\" && \"bg-accent\")}\n                data-testid=\"nav-beds-desktop\"\n              >\n                <Grid3x3 className=\"h-4 w-4 mr-2\" />\n                Beds\n              </Button>\n            </Link>\n          </nav>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      <main className=\"flex-1 p-4\">\n        <div className=\"max-w-7xl mx-auto space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-display font-bold\">My Garden Beds</h2>\n              <p className=\"text-muted-foreground\">\n                {beds.length === 0 \n                  ? \"Start by chatting with the AI to create your first bed\"\n                  : `${beds.length} bed${beds.length === 1 ? \"\" : \"s\"}`\n                }\n              </p>\n            </div>\n          </div>\n\n          {beds.length === 0 ? (\n            <div className=\"text-center py-12 space-y-4\">\n              <div className=\"mx-auto w-16 h-16 rounded-full bg-muted flex items-center justify-center\">\n                <Sprout className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"font-display text-lg font-semibold\">No garden beds yet</h3>\n                <p className=\"text-muted-foreground max-w-md mx-auto\">\n                  Chat with the AI assistant to catalog your plants and create garden beds\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {beds.map((bed) => (\n                <Card key={bed.id} className=\"hover-elevate\" data-testid={`card-bed-${bed.bedName.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 gap-2\">\n                    <CardTitle className=\"font-display text-xl\" data-testid=\"text-bed-name\">{bed.bedName}</CardTitle>\n                    <div className=\"flex items-center gap-1\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleEditBed(bed)}\n                        data-testid={`button-edit-bed-${bed.id}`}\n                      >\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => setDeletingBed(bed)}\n                        data-testid={`button-delete-bed-${bed.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardHeader>\n\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex flex-wrap gap-3 text-sm\">\n                      {bed.sunExposure && (\n                        <div className=\"flex items-center gap-1.5\">\n                          <Sun className=\"h-4 w-4 text-chart-4\" />\n                          <span className=\"text-muted-foreground\" data-testid=\"text-sun-exposure\">{bed.sunExposure}</span>\n                        </div>\n                      )}\n                      {bed.soilMoisture && (\n                        <div className=\"flex items-center gap-1.5\">\n                          <Droplet className=\"h-4 w-4 text-chart-3\" />\n                          <span className=\"text-muted-foreground\" data-testid=\"text-soil-moisture\">{bed.soilMoisture}</span>\n                        </div>\n                      )}\n                      {bed.bedSizeSqft && (\n                        <div className=\"flex items-center gap-1.5\">\n                          <Ruler className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-muted-foreground\" data-testid=\"text-bed-size\">{bed.bedSizeSqft} sq ft</span>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      {!plantsMap[bed.id] || plantsMap[bed.id].length === 0 ? (\n                        <p className=\"text-sm text-muted-foreground py-4 text-center\">No plants yet</p>\n                      ) : (\n                        plantsMap[bed.id].map((plant) => (\n                          <div\n                            key={plant.id}\n                            className=\"flex items-center gap-3 p-2 rounded-md border border-border hover-elevate\"\n                            data-testid={`plant-item-${plant.id}`}\n                          >\n                            {plant.imageUrl && (\n                              <div className=\"w-10 h-10 rounded-md bg-muted flex-shrink-0 overflow-hidden\">\n                                <img\n                                  src={plant.imageUrl}\n                                  alt={plant.commonName}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                              </div>\n                            )}\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium truncate\" data-testid={`text-plant-name-${plant.id}`}>\n                                {plant.commonName}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Quantity: {plant.quantity || 1}\n                              </p>\n                            </div>\n                            <div\n                              className={`h-2.5 w-2.5 rounded-full flex-shrink-0 ${getHealthColor(plant.healthStatus)} ${\n                                plant.healthStatus === \"thriving\" ? \"animate-pulse\" : \"\"\n                              }`}\n                              data-testid={`status-${plant.healthStatus}`}\n                              title={plant.healthStatus || \"unknown\"}\n                            />\n                            <div className=\"flex items-center gap-1\">\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={() => handleEditPlant(plant)}\n                                data-testid={`button-edit-plant-${plant.id}`}\n                                className=\"h-7 w-7\"\n                              >\n                                <Pencil className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                onClick={() => setDeletingPlant(plant)}\n                                data-testid={`button-delete-plant-${plant.id}`}\n                                className=\"h-7 w-7\"\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n\n      {/* Edit Bed Dialog */}\n      <Dialog open={!!editingBed} onOpenChange={(open) => !open && setEditingBed(null)}>\n        <DialogContent data-testid=\"dialog-edit-bed\">\n          <form onSubmit={handleSaveBed}>\n            <DialogHeader>\n              <DialogTitle>Edit Garden Bed</DialogTitle>\n              <DialogDescription>\n                Update the details of your garden bed.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"bedName\">Bed Name *</Label>\n                <Input\n                  id=\"bedName\"\n                  name=\"bedName\"\n                  defaultValue={editingBed?.bedName}\n                  required\n                  data-testid=\"input-bed-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"sunExposure\">Sun Exposure</Label>\n                <Input\n                  id=\"sunExposure\"\n                  name=\"sunExposure\"\n                  defaultValue={editingBed?.sunExposure || \"\"}\n                  placeholder=\"e.g., Full sun, Partial shade\"\n                  data-testid=\"input-sun-exposure\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"soilType\">Soil Type</Label>\n                <Input\n                  id=\"soilType\"\n                  name=\"soilType\"\n                  defaultValue={editingBed?.soilType || \"\"}\n                  placeholder=\"e.g., Loamy, Clay\"\n                  data-testid=\"input-soil-type\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"soilMoisture\">Soil Moisture</Label>\n                <Input\n                  id=\"soilMoisture\"\n                  name=\"soilMoisture\"\n                  defaultValue={editingBed?.soilMoisture || \"\"}\n                  placeholder=\"e.g., Moist, Well-drained\"\n                  data-testid=\"input-soil-moisture\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"bedSizeSqft\">Bed Size (sq ft)</Label>\n                <Input\n                  id=\"bedSizeSqft\"\n                  name=\"bedSizeSqft\"\n                  type=\"number\"\n                  defaultValue={editingBed?.bedSizeSqft || \"\"}\n                  placeholder=\"e.g., 20\"\n                  data-testid=\"input-bed-size\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  name=\"notes\"\n                  defaultValue={editingBed?.notes || \"\"}\n                  placeholder=\"Additional notes...\"\n                  data-testid=\"input-bed-notes\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setEditingBed(null)}\n                data-testid=\"button-cancel-edit-bed\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateBedMutation.isPending}\n                data-testid=\"button-save-bed\"\n              >\n                {updateBedMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Plant Dialog */}\n      <Dialog open={!!editingPlant} onOpenChange={(open) => !open && setEditingPlant(null)}>\n        <DialogContent data-testid=\"dialog-edit-plant\">\n          <form onSubmit={handleSavePlant}>\n            <DialogHeader>\n              <DialogTitle>Edit Plant</DialogTitle>\n              <DialogDescription>\n                Update the details of this plant.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"commonName\">Common Name *</Label>\n                <Input\n                  id=\"commonName\"\n                  name=\"commonName\"\n                  defaultValue={editingPlant?.commonName}\n                  required\n                  data-testid=\"input-plant-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"scientificName\">Scientific Name</Label>\n                <Input\n                  id=\"scientificName\"\n                  name=\"scientificName\"\n                  defaultValue={editingPlant?.scientificName || \"\"}\n                  placeholder=\"e.g., Solanum lycopersicum\"\n                  data-testid=\"input-scientific-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"quantity\">Quantity *</Label>\n                <Input\n                  id=\"quantity\"\n                  name=\"quantity\"\n                  type=\"number\"\n                  min=\"1\"\n                  defaultValue={editingPlant?.quantity || 1}\n                  required\n                  data-testid=\"input-quantity\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"healthStatus\">Health Status</Label>\n                <Input\n                  id=\"healthStatus\"\n                  name=\"healthStatus\"\n                  defaultValue={editingPlant?.healthStatus || \"\"}\n                  placeholder=\"e.g., thriving, ok, struggling\"\n                  data-testid=\"input-health-status\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  name=\"notes\"\n                  defaultValue={editingPlant?.notes || \"\"}\n                  placeholder=\"Additional notes...\"\n                  data-testid=\"input-plant-notes\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setEditingPlant(null)}\n                data-testid=\"button-cancel-edit-plant\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updatePlantMutation.isPending}\n                data-testid=\"button-save-plant\"\n              >\n                {updatePlantMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Bed Confirmation */}\n      <AlertDialog open={!!deletingBed} onOpenChange={(open) => !open && setDeletingBed(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-bed\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Garden Bed</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{deletingBed?.bedName}\"? This will also remove all plants in this bed. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-bed\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingBed && deleteBedMutation.mutate(deletingBed.id)}\n              disabled={deleteBedMutation.isPending}\n              data-testid=\"button-confirm-delete-bed\"\n              className=\"bg-destructive hover:bg-destructive/90\"\n            >\n              {deleteBedMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Delete Plant Confirmation */}\n      <AlertDialog open={!!deletingPlant} onOpenChange={(open) => !open && setDeletingPlant(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-plant\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Remove Plant</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to remove \"{deletingPlant?.commonName}\" from this bed? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-plant\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deletingPlant && deletePlantMutation.mutate(deletingPlant.id)}\n              disabled={deletePlantMutation.isPending}\n              data-testid=\"button-confirm-delete-plant\"\n              className=\"bg-destructive hover:bg-destructive/90\"\n            >\n              {deletePlantMutation.isPending ? \"Removing...\" : \"Remove\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":25126},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/examples/ChatPage.tsx":{"content":"import ChatPage from \"../ChatPage\";\n\nexport default function ChatPageExample() {\n  return <ChatPage />;\n}\n","size_bytes":106},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeToggle } from \"../ThemeToggle\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-4 flex justify-center\">\n      <ThemeToggle />\n    </div>\n  );\n}\n","size_bytes":191},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/examples/ConfirmationSummary.tsx":{"content":"import { ConfirmationSummary } from \"../ConfirmationSummary\";\n\nexport default function ConfirmationSummaryExample() {\n  const plantSummary = {\n    commonName: \"Lavender\",\n    scientificName: \"Lavandula angustifolia\",\n    quantity: 3,\n    datePlanted: \"Spring 2024\",\n    sunExposure: \"Full sun\",\n    healthStatus: \"Thriving\",\n    notes: \"Planted along the south-facing fence. Very fragrant!\",\n  };\n\n  return (\n    <div className=\"p-4 max-w-md mx-auto\">\n      <ConfirmationSummary\n        bedName=\"Herb Garden\"\n        plant={plantSummary}\n        onSave={() => console.log(\"Save clicked\")}\n        onEdit={() => console.log(\"Edit clicked\")}\n        onCancel={() => console.log(\"Cancel clicked\")}\n      />\n    </div>\n  );\n}\n","size_bytes":722},"replit.md":{"content":"Great# Garden Catalog - AI Plant Assistant\n\n## Overview\n\nAn intelligent conversational chatbot application that helps users catalog plants in their garden beds. The system identifies plants from photos, understands natural language descriptions, and extracts structured data from casual conversation to maintain a comprehensive garden database.\n\n**Core Functionality:**\n- AI-powered plant identification from photos\n- Natural language conversation interface for plant cataloging\n- Garden bed and plant management\n- Persistent conversation history\n- Responsive design with mobile-first approach\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management and caching\n\n**UI Component System:**\n- Radix UI primitives for accessible, unstyled components\n- shadcn/ui component library (New York style variant)\n- Tailwind CSS for utility-first styling with custom design tokens\n- Class Variance Authority (CVA) for component variant management\n\n**Design System:**\n- Nature-inspired color palette with garden green primary colors\n- Custom CSS variables for light/dark theme support\n- Typography: Inter (primary), Raleway (display), JetBrains Mono (monospace)\n- Mobile-first responsive design with bottom navigation for small screens\n\n**State Management:**\n- React Context for user authentication/session state\n- TanStack Query for server state, caching, and data fetching\n- Local component state with React hooks\n- localStorage for user persistence\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js with TypeScript for type-safe API development\n- Node.js runtime environment\n- Custom middleware for request logging and error handling\n\n**API Structure:**\n- RESTful endpoints organized by resource:\n  - `/api/users` - User management\n  - `/api/beds` - Garden bed CRUD operations\n  - `/api/plants` - Plant cataloging and retrieval\n  - `/api/conversations` - Chat history persistence\n  - `/api/identify` - Plant identification from photos\n\n**File Upload:**\n- Multer middleware for handling multipart/form-data\n- Local file storage in `uploads/` directory\n- Image processing for plant identification API integration\n\n### Database Architecture\n\n**ORM & Schema:**\n- Drizzle ORM for type-safe database operations\n- PostgreSQL as the primary database (Neon serverless)\n- Schema-first approach with Zod validation\n- Database connection pooling with @neondatabase/serverless\n\n**Data Models:**\n1. **Users Table** - User profiles with location and experience level\n2. **Garden Beds Table** - Bed metadata including sun exposure, soil type, and moisture\n3. **Plants Table** - Detailed plant records with identification confidence scores\n4. **Conversations Table** - Chat message history and context preservation\n\n**Database Migrations:**\n- Drizzle Kit for schema migrations\n- Migration files stored in `/migrations` directory\n- Push-based deployment with `db:push` command\n\n### External Dependencies\n\n**Third-Party Services:**\n- Plant Identification API (to be integrated) - For photo-based plant recognition\n- Neon Database - Serverless PostgreSQL hosting\n- WebSocket support via `ws` package for real-time features\n\n**Development Tools:**\n- Replit-specific plugins for development experience:\n  - Runtime error overlay\n  - Cartographer (dev mode only)\n  - Dev banner (dev mode only)\n\n**Authentication & Session:**\n- Session management with connect-pg-simple\n- User creation and persistence via localStorage\n- Auto-generated demo users for MVP\n\n**API Integration Points:**\n- Plant identification endpoint (`/api/identify`) expects integration with external plant ID service\n- Image upload flow: Client → Multer → Plant ID API → Database\n- Response includes confidence scores and alternative plant suggestions\n\n**Key Architectural Decisions:**\n\n1. **Monorepo Structure**: Single repository with shared types between client and server via `@shared` path alias for type safety across the stack\n\n2. **Type Safety**: End-to-end TypeScript with Drizzle-Zod for runtime validation matching database schema\n\n3. **Real-time Communication**: WebSocket infrastructure prepared for future live updates and collaborative features\n\n4. **Mobile-First UI**: Bottom navigation pattern for mobile with adaptive desktop layout using responsive breakpoints\n\n5. **Conversation Persistence**: Chat history stored in database with JSON message format for flexible message structure\n\n6. **Progressive Enhancement**: Core functionality works without JavaScript, enhanced with React for interactivity\n\n## Current Feature Status\n\n### Completed Features ✅\n- Plant identification from photos (Plant.id API integration)\n- Natural language plant cataloging via chat (Google Gemini AI)\n- Full CRUD operations for beds and plants (UI + chat commands)\n- Edit/delete functionality with confirmation dialogs\n- Form validation (quantity must be valid number > 0)\n- Cache invalidation and real-time UI updates\n- Conversation history persistence\n- Mobile-responsive design with bottom navigation\n\n### Planned Features 📋\n\n#### Task Management & Grouping System (HIGH PRIORITY)\n**Business Value**: Customer research indicates task management is a top requested feature.\n\n**Architectural Design** (from 2025 planning discussion):\n\n1. **Schema Additions**:\n   - `sites` table: Physical garden locations (id, userId, name, notes)\n   - Optional `siteId` foreign key on `garden_beds` table\n   - `task_categories` table: Care activity catalog (id, name, description)\n     - Examples: \"Water\", \"Fertilize\", \"Prune\", \"Harvest\"\n   - `plant_task_categories` join table: Links plants to tasks (plantId, taskCategoryId, recurrence, nextDueOn)\n   - `plant_traits` table: Generic key/value for extensible attributes (plantId, key, value)\n     - Examples: season=\"spring\", companionGroup=\"herbs\"\n\n2. **API Design**:\n   - Unified endpoint: `GET /api/plant-groups?groupBy=<mode>`\n   - Supported modes: `site`, `task`, `conditions`, `health`, `traits`\n   - Response format:\n     ```json\n     {\n       \"groups\": [\n         {\n           \"groupKey\": \"string\",\n           \"label\": \"string\",\n           \"plants\": [...],\n           \"meta\": { /* group-specific info */ }\n         }\n       ]\n     }\n     ```\n   - CRUD endpoints for task assignments and traits\n\n3. **Frontend Implementation**:\n   - View selector (Tabs on desktop, Select on mobile)\n   - Query key pattern: `['/api/plant-groups', userId, groupBy]`\n   - Per-mode caching for fast switching\n   - Reuse existing Bed/Plant card components with adapter props\n\n4. **Implementation Phases**:\n   - Phase 1: Condition-based grouping (uses existing data, no schema changes)\n   - Phase 2: Site/location grouping (new `sites` table)\n   - Phase 3: Task management system (task tables + scheduling)\n   - Phase 4: Generic traits for unlimited extensibility\n\n**Technical Considerations**:\n- Add composite indexes on bedId/taskCategoryId and siteId for efficient queries\n- Encapsulate grouping logic in `PlantGroupingService` for reuse across chat + REST\n- Enable chat AI to reference and manage task assignments\n- Consider recurrence patterns and due date calculations for task scheduling\n\n**Next Steps When Resuming**:\n1. Decide on initial implementation scope (start with Phase 1 or full system)\n2. Design schema migrations with seed data for default sites/tasks\n3. Implement PlantGroupingService + REST handlers\n4. Build UI view selector and integrate with TanStack Query\n5. Update Gemini AI prompts to understand task-based queries","size_bytes":7737},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/lib/userContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface UserContextType {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  isLoading: boolean;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport function UserProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user exists in localStorage\n    const storedUser = localStorage.getItem(\"gardenCatalogUser\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n      setIsLoading(false);\n    } else {\n      // Create a demo user for the MVP\n      fetch(\"/api/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          name: \"Garden Enthusiast\",\n          email: `user-${Date.now()}@gardencatalog.app`,\n        }),\n      })\n        .then(async (res) => {\n          if (!res.ok) {\n            const error = await res.text();\n            throw new Error(`Failed to create user: ${error}`);\n          }\n          return res.json();\n        })\n        .then((newUser) => {\n          setUser(newUser);\n          localStorage.setItem(\"gardenCatalogUser\", JSON.stringify(newUser));\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          console.error(\"Failed to create user:\", error);\n          setIsLoading(false);\n        });\n    }\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ user, setUser, isLoading }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUser() {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error(\"useUser must be used within a UserProvider\");\n  }\n  return context;\n}\n","size_bytes":1882},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/examples/PhotoUpload.tsx":{"content":"import { PhotoUpload } from \"../PhotoUpload\";\n\nexport default function PhotoUploadExample() {\n  return (\n    <div className=\"p-4 max-w-2xl mx-auto\">\n      <PhotoUpload onPhotoSelect={(file) => console.log(\"Photo selected:\", file.name)} />\n    </div>\n  );\n}\n","size_bytes":257},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        display: [\"Raleway\", \"var(--font-sans)\"],\n        mono: [\"JetBrains Mono\", \"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4089},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertUserSchema,\n  insertGardenBedSchema,\n  insertPlantSchema,\n} from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { GoogleGenAI } from \"@google/genai\";\n\nconst upload = multer({ dest: \"uploads/\" });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const user = insertUserSchema.parse(req.body);\n      const newUser = await storage.createUser(user);\n      res.json(newUser);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Garden bed routes\n  app.get(\"/api/beds\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const beds = await storage.getGardenBedsByUser(userId);\n      res.json(beds);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/beds/:id\", async (req, res) => {\n    try {\n      const bed = await storage.getGardenBed(req.params.id);\n      if (!bed) {\n        return res.status(404).json({ error: \"Garden bed not found\" });\n      }\n      res.json(bed);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/beds\", async (req, res) => {\n    try {\n      const bed = insertGardenBedSchema.parse(req.body);\n      const newBed = await storage.createGardenBed(bed);\n      res.json(newBed);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/beds/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updateGardenBed(req.params.id, req.body);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/beds/:id\", async (req, res) => {\n    try {\n      await storage.deleteGardenBed(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Plant routes\n  app.get(\"/api/plants\", async (req, res) => {\n    try {\n      const bedId = req.query.bedId as string;\n      if (!bedId) {\n        return res.status(400).json({ error: \"bedId is required\" });\n      }\n      const plants = await storage.getPlantsByBed(bedId);\n      res.json(plants);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/plants/:id\", async (req, res) => {\n    try {\n      const plant = await storage.getPlant(req.params.id);\n      if (!plant) {\n        return res.status(404).json({ error: \"Plant not found\" });\n      }\n      res.json(plant);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/plants\", async (req, res) => {\n    try {\n      const plant = insertPlantSchema.parse(req.body);\n      const newPlant = await storage.createPlant(plant);\n      res.json(newPlant);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/plants/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updatePlant(req.params.id, req.body);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/plants/:id\", async (req, res) => {\n    try {\n      await storage.deletePlant(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Photo upload route\n  app.post(\"/api/upload\", upload.single(\"photo\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      // Create uploads directory if it doesn't exist\n      await fs.mkdir(\"uploads\", { recursive: true });\n\n      const filename = `${Date.now()}-${req.file.originalname}`;\n      const filepath = path.join(\"uploads\", filename);\n\n      await fs.rename(req.file.path, filepath);\n\n      res.json({ \n        url: `/uploads/${filename}`,\n        filename \n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Plant identification route (will integrate with Plant.id API)\n  app.post(\"/api/identify-plant\", async (req, res) => {\n    try {\n      const { imageUrl, base64Image } = req.body;\n\n      if (!process.env.PLANTID_API_KEY) {\n        return res.status(503).json({ \n          error: \"Plant identification service not configured. Please add PLANTID_API_KEY.\" \n        });\n      }\n\n      // Call Plant.id API\n      const response = await fetch(\"https://api.plant.id/v3/identification?details=common_names,url,taxonomy,wiki_description\", {\n        method: \"POST\",\n        headers: {\n          \"Api-Key\": process.env.PLANTID_API_KEY,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          images: [base64Image],\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error(\"Plant.id API error:\", errorData);\n        throw new Error(`Plant.id API error: ${response.statusText} - ${JSON.stringify(errorData)}`);\n      }\n\n      const data = await response.json();\n      res.json(data);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get conversation for user\n  app.get(\"/api/conversations/:userId\", async (req, res) => {\n    try {\n      const conversation = await storage.getConversation(req.params.userId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"No conversation found\" });\n      }\n      res.json(conversation);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Chat/conversation route (will integrate with OpenAI)\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const { message, userId, conversationId } = req.body;\n\n      // Get or create conversation\n      let conversation = await storage.getConversation(userId);\n\n      const messages = conversation \n        ? JSON.parse(conversation.messages)\n        : [];\n\n      // Ensure message has valid content\n      if (!message || message.trim().length === 0) {\n        return res.status(400).json({ error: \"Message cannot be empty\" });\n      }\n\n      messages.push({ role: \"user\", content: message });\n\n      let assistantMessage: string;\n\n      // Check if Gemini is configured\n      if (!process.env.GEMINI_API_KEY) {\n        assistantMessage = \"I'm not fully configured yet (missing Gemini API key), but I've saved your message! You can still browse your garden beds and I'll remember our conversation.\";\n      } else {\n        try {\n          // Initialize Gemini AI - using blueprint:javascript_gemini\n          const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\n\n          // System prompt - extract structured data as JSON\n          const systemPrompt = `You are a helpful garden assistant that helps users catalog and manage their garden plants.\n\nACTIONS:\n1. Adding plants:\n{\n  \"action\": \"add_plants\",\n  \"bedName\": \"name of the garden bed\",\n  \"plants\": [{\"commonName\": \"plant name\", \"scientificName\": \"optional\", \"quantity\": 1, \"notes\": \"optional\"}],\n  \"response\": \"Your friendly response to the user\"\n}\n\n2. Removing/deleting plants:\n{\n  \"action\": \"remove_plants\",\n  \"bedName\": \"name of the garden bed\",\n  \"plantNames\": [\"tomato\", \"basil\"],\n  \"response\": \"Your friendly confirmation message\"\n}\n\n3. Removing/deleting an entire bed:\n{\n  \"action\": \"remove_bed\",\n  \"bedName\": \"name of the garden bed to remove\",\n  \"response\": \"Your friendly confirmation message\"\n}\n\n4. Just chatting or asking questions:\n{\n  \"action\": \"chat\",\n  \"response\": \"Your friendly response\"\n}\n\nExamples:\n- \"Remove the tomato from my herb garden\" → action: \"remove_plants\", bedName: \"herb garden\", plantNames: [\"tomato\"]\n- \"Delete the vegetable bed\" → action: \"remove_bed\", bedName: \"vegetable bed\"\n- \"Add basil to my herb garden\" → action: \"add_plants\", bedName: \"herb garden\", plants: [{\"commonName\": \"basil\", \"quantity\": 1}]\n\nAlways include the \"response\" field with a friendly message.`;\n\n          // Convert messages to Gemini format\n          const geminiHistory = messages\n            .slice(0, -1)\n            .filter((msg: any) => msg.content && msg.content.trim().length > 0)\n            .map((msg: any) => ({\n              role: msg.role === \"assistant\" ? \"model\" : \"user\",\n              parts: [{ text: msg.content }],\n            }));\n\n          // Call Gemini API\n          const response = await ai.models.generateContent({\n            model: \"gemini-2.5-flash\",\n            config: {\n              systemInstruction: systemPrompt,\n              responseMimeType: \"application/json\",\n            },\n            contents: [\n              ...geminiHistory,\n              {\n                role: \"user\",\n                parts: [{ text: message }],\n              },\n            ],\n          });\n\n          try {\n            // Parse JSON response\n            const jsonText = response.text || \"\";\n            const data = JSON.parse(jsonText);\n            \n            if (data.action === \"add_plants\" && data.plants && data.plants.length > 0) {\n              // Find or create the bed\n              const beds = await storage.getGardenBedsByUser(userId);\n              let bed = beds.find(b => b.bedName.toLowerCase() === data.bedName.toLowerCase());\n              \n              if (!bed) {\n                bed = await storage.createGardenBed({\n                  userId,\n                  bedName: data.bedName,\n                  sunExposure: null,\n                  soilType: null,\n                  notes: null,\n                  bedSizeSqft: null,\n                  soilMoisture: null,\n                });\n              }\n              \n              // Add all plants\n              const plantsAdded: string[] = [];\n              for (const plant of data.plants) {\n                await storage.createPlant({\n                  bedId: bed.id,\n                  commonName: plant.commonName,\n                  scientificName: plant.scientificName || null,\n                  quantity: plant.quantity || 1,\n                  healthStatus: null,\n                  notes: plant.notes || null,\n                  plantType: null,\n                  datePlanted: null,\n                  imageUrl: null,\n                  spacingInches: null,\n                  currentHeight: null,\n                  identificationConfidence: null,\n                });\n                \n                const qty = plant.quantity || 1;\n                plantsAdded.push(`${qty} ${plant.commonName}`);\n              }\n              \n              assistantMessage = data.response || `Added ${plantsAdded.length} plant(s) to \"${data.bedName}\"!`;\n            } else if (data.action === \"remove_plants\" && data.plantNames && data.plantNames.length > 0) {\n              // Find the bed\n              const beds = await storage.getGardenBedsByUser(userId);\n              const bed = beds.find(b => b.bedName.toLowerCase() === data.bedName.toLowerCase());\n              \n              if (bed) {\n                const plantsInBed = await storage.getPlantsByBed(bed.id);\n                const plantsRemoved: string[] = [];\n                \n                for (const plantName of data.plantNames) {\n                  const plantToRemove = plantsInBed.find(\n                    p => p.commonName.toLowerCase() === plantName.toLowerCase()\n                  );\n                  \n                  if (plantToRemove) {\n                    await storage.deletePlant(plantToRemove.id);\n                    plantsRemoved.push(plantToRemove.commonName);\n                  }\n                }\n                \n                if (plantsRemoved.length > 0) {\n                  assistantMessage = data.response || `Removed ${plantsRemoved.join(\", \")} from \"${data.bedName}\".`;\n                } else {\n                  assistantMessage = `I couldn't find those plants in \"${data.bedName}\". Could you check the names?`;\n                }\n              } else {\n                assistantMessage = `I couldn't find a bed called \"${data.bedName}\". Could you check the name?`;\n              }\n            } else if (data.action === \"remove_bed\") {\n              // Find and delete the bed\n              const beds = await storage.getGardenBedsByUser(userId);\n              \n              // Try to find bed by exact name or flexible matching\n              let bed = beds.find(b => b.bedName.toLowerCase() === data.bedName.toLowerCase());\n              \n              // If not found, try removing common suffixes like \" bed\"\n              if (!bed && data.bedName) {\n                const cleanBedName = data.bedName.toLowerCase().replace(/\\s+bed$/i, '').trim();\n                bed = beds.find(b => b.bedName.toLowerCase() === cleanBedName);\n              }\n              \n              if (bed) {\n                console.log(`[Chat] Deleting bed: ${bed.bedName} (id: ${bed.id})`);\n                \n                // Delete all plants in the bed first\n                const plantsInBed = await storage.getPlantsByBed(bed.id);\n                console.log(`[Chat] Deleting ${plantsInBed.length} plants from bed`);\n                for (const plant of plantsInBed) {\n                  await storage.deletePlant(plant.id);\n                }\n                \n                // Delete the bed\n                await storage.deleteGardenBed(bed.id);\n                console.log(`[Chat] Bed deleted successfully`);\n                assistantMessage = data.response || `Deleted the garden bed \"${bed.bedName}\" and all its plants.`;\n              } else {\n                console.log(`[Chat] Bed not found: \"${data.bedName}\". Available beds:`, beds.map(b => b.bedName));\n                assistantMessage = `I couldn't find a bed called \"${data.bedName}\". You have: ${beds.map(b => b.bedName).join(\", \")}. Could you check the name?`;\n              }\n            } else {\n              assistantMessage = data.response || response.text || \"Got it!\";\n            }\n          } catch (e) {\n            console.error(\"Failed to parse Gemini JSON:\", e);\n            assistantMessage = response.text || \"I'm sorry, I had trouble processing that.\";\n          }\n        } catch (error: any) {\n          // If Gemini fails, provide a helpful fallback message\n          assistantMessage = \"I'm having trouble connecting to my AI service right now. Could you try again in a moment? Your message has been saved.\";\n          console.error(\"Gemini API error:\", error);\n        }\n      }\n\n      messages.push({ role: \"assistant\", content: assistantMessage });\n\n      // Save conversation regardless of OpenAI success/failure\n      if (conversation) {\n        conversation = await storage.updateConversation(conversation.id, {\n          messages: JSON.stringify(messages),\n        });\n      } else {\n        conversation = await storage.createConversation({\n          userId,\n          messages: JSON.stringify(messages),\n          context: null,\n        });\n      }\n\n      res.json({ \n        message: assistantMessage,\n        conversationId: conversation.id,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Serve uploaded files\n  app.use(\"/uploads\", (req, res, next) => {\n    res.sendFile(path.join(process.cwd(), \"uploads\", req.path));\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16121},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/ChatPage.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { ChatMessage } from \"@/components/ChatMessage\";\nimport { ChatInput } from \"@/components/ChatInput\";\nimport { TypingIndicator } from \"@/components/TypingIndicator\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { PhotoUpload } from \"@/components/PhotoUpload\";\nimport { useUser } from \"@/lib/userContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Sprout, Menu, X, MessageSquare, Grid3x3 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Message {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: string;\n}\n\nexport default function ChatPage() {\n  const { user, isLoading: userLoading } = useUser();\n  const [location] = useLocation();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const [showPhotoUpload, setShowPhotoUpload] = useState(false);\n  const [isLoadingHistory, setIsLoadingHistory] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (user && messages.length === 0 && !isLoadingHistory) {\n      // Try to load existing conversation\n      setIsLoadingHistory(true);\n      fetch(`/api/conversations/${user.id}`)\n        .then((res) => {\n          if (res.ok) {\n            return res.json();\n          }\n          return null;\n        })\n        .then((conversation) => {\n          if (conversation && conversation.messages) {\n            const parsed = JSON.parse(conversation.messages);\n            const formattedMessages = parsed.map((msg: any, idx: number) => ({\n              id: `${conversation.id}-${idx}`,\n              role: msg.role,\n              content: msg.content,\n              timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n            }));\n            setMessages(formattedMessages);\n            setConversationId(conversation.id);\n          } else {\n            // Add initial greeting\n            setMessages([\n              {\n                id: \"1\",\n                role: \"assistant\",\n                content:\n                  \"Hi! 👋 I'm your AI garden assistant. I can help you catalog your plants by identifying them from photos or just chatting about what's in your garden.\\n\\nTo get started, you can:\\n📷 Send me a photo of a plant\\n💬 Tell me what you're growing (e.g., 'I have some roses in my front yard')\\n🗺️ Describe a garden bed and I'll help organize it\\n\\nWhat works best for you?\",\n                timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n              },\n            ]);\n          }\n          setIsLoadingHistory(false);\n        })\n        .catch((error) => {\n          console.error(\"Failed to load conversation:\", error);\n          setIsLoadingHistory(false);\n        });\n    }\n  }, [user, messages.length, isLoadingHistory]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          message,\n          userId: user?.id,\n          conversationId,\n        }),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) {\n        throw new Error(\"Chat request failed\");\n      }\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      const response: Message = {\n        id: Date.now().toString(),\n        role: \"assistant\",\n        content: data.message,\n        timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n      };\n      setMessages((prev) => [...prev, response]);\n      if (data.conversationId) {\n        setConversationId(data.conversationId);\n      }\n    },\n    onError: (error: any) => {\n      console.error(\"Chat error:\", error);\n      const errorMsg: Message = {\n        id: Date.now().toString(),\n        role: \"assistant\",\n        content: \"I'm having trouble connecting right now. This feature requires OpenAI API key to be configured. For now, you can still browse your garden beds!\",\n        timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n      };\n      setMessages((prev) => [...prev, errorMsg]);\n    },\n  });\n\n  const handleSendMessage = (content: string) => {\n    const newMessage: Message = {\n      id: Date.now().toString(),\n      role: \"user\",\n      content,\n      timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n    };\n\n    setMessages((prev) => [...prev, newMessage]);\n    chatMutation.mutate(content);\n  };\n\n  const handlePhotoUpload = async (file: File) => {\n    setShowPhotoUpload(false);\n    \n    const userMsg: Message = {\n      id: Date.now().toString(),\n      role: \"user\",\n      content: \"📷 [Uploaded a photo]\",\n      timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n    };\n    setMessages((prev) => [...prev, userMsg]);\n\n    try {\n      // Upload the photo\n      const formData = new FormData();\n      formData.append(\"photo\", file);\n\n      const uploadRes = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!uploadRes.ok) {\n        throw new Error(\"Failed to upload photo\");\n      }\n\n      const { url } = await uploadRes.json();\n\n      // Convert to base64 for Plant.id API\n      const reader = new FileReader();\n      reader.onload = async () => {\n        const base64 = (reader.result as string).split(\",\")[1];\n\n        // Identify the plant\n        const identifyRes = await fetch(\"/api/identify-plant\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ base64Image: base64, imageUrl: url }),\n        });\n\n        if (!identifyRes.ok) {\n          throw new Error(\"Plant identification failed\");\n        }\n\n        const data = await identifyRes.json();\n        \n        if (data.result?.is_plant?.binary) {\n          const suggestions = data.result.classification.suggestions.slice(0, 3);\n          const topMatch = suggestions[0];\n          \n          // Build context message for Gemini\n          let contextMessage = `I just analyzed a plant photo using Plant.id API. Here's what I found:\\n\\n`;\n          contextMessage += `Primary identification: ${topMatch.name}`;\n          if (topMatch.details?.common_names?.length > 0) {\n            contextMessage += ` (commonly known as: ${topMatch.details.common_names.slice(0, 3).join(\", \")})`;\n          }\n          contextMessage += `\\nConfidence: ${Math.round(topMatch.probability * 100)}%\\n`;\n          \n          if (topMatch.details?.taxonomy) {\n            const tax = topMatch.details.taxonomy;\n            contextMessage += `\\nTaxonomy:`;\n            if (tax.family) contextMessage += `\\n- Family: ${tax.family}`;\n            if (tax.genus) contextMessage += `\\n- Genus: ${tax.genus}`;\n          }\n          \n          if (suggestions.length > 1) {\n            contextMessage += `\\n\\nAlternative possibilities:`;\n            suggestions.slice(1).forEach((alt: any, idx: number) => {\n              contextMessage += `\\n${idx + 2}. ${alt.name} (${Math.round(alt.probability * 100)}% confidence)`;\n            });\n          }\n          \n          // Send identification context to Gemini via chat API\n          const chatResponse = await fetch(\"/api/chat\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              message: contextMessage,\n              userId: user?.id,\n            }),\n          });\n          \n          if (chatResponse.ok) {\n            const chatData = await chatResponse.json();\n            \n            // Add Gemini's response (which now has context about the plant)\n            const assistantMsg: Message = {\n              id: (Date.now() + 1).toString(),\n              role: \"assistant\",\n              content: chatData.message,\n              timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n            };\n            setMessages((prev) => [...prev, assistantMsg]);\n          } else {\n            // Fallback if chat API fails\n            let responseContent = `Great photo! 📸 I've identified this plant:\\n\\n`;\n            responseContent += `**${topMatch.name}**\\n`;\n            responseContent += `Confidence: ${Math.round(topMatch.probability * 100)}%\\n\\n`;\n            \n            if (topMatch.details?.common_names?.length > 0) {\n              responseContent += `Common names: ${topMatch.details.common_names.slice(0, 3).join(\", \")}\\n\\n`;\n            }\n            \n            if (suggestions.length > 1) {\n              responseContent += `It could also be:\\n`;\n              suggestions.slice(1).forEach((alt: any, idx: number) => {\n                responseContent += `${idx + 2}. ${alt.name} (${Math.round(alt.probability * 100)}%)\\n`;\n              });\n              responseContent += `\\n`;\n            }\n            \n            responseContent += `Would you like to add this to your garden catalog? Tell me which bed it's in, or I can help you create a new bed!`;\n\n            const assistantMsg: Message = {\n              id: (Date.now() + 1).toString(),\n              role: \"assistant\",\n              content: responseContent,\n              timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n            };\n            setMessages((prev) => [...prev, assistantMsg]);\n          }\n        } else {\n          throw new Error(\"Not a plant image\");\n        }\n      };\n      reader.readAsDataURL(file);\n    } catch (error: any) {\n      console.error(\"Photo processing error:\", error);\n      const errorMsg: Message = {\n        id: (Date.now() + 1).toString(),\n        role: \"assistant\",\n        content: error.message.includes(\"not configured\")\n          ? \"Plant identification requires PLANTID_API_KEY to be configured. For now, you can describe your plant and I'll help you catalog it!\"\n          : \"I had trouble identifying that plant. Could you describe it for me? What does it look like?\",\n        timestamp: new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n      };\n      setMessages((prev) => [...prev, errorMsg]);\n    }\n  };\n\n  if (userLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-2\">\n          <Sprout className=\"h-8 w-8 text-primary mx-auto animate-pulse\" />\n          <p className=\"text-muted-foreground\">Setting up your garden...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header className=\"sticky top-0 z-10 flex items-center justify-between px-4 h-16 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex items-center gap-2\">\n            <Sprout className=\"h-6 w-6 text-primary\" />\n            <h1 className=\"text-lg font-display font-semibold\" data-testid=\"text-app-title\">\n              Garden Catalog\n            </h1>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <nav className=\"hidden lg:flex items-center gap-1\">\n            <Link href=\"/\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={cn(location === \"/\" && \"bg-accent\")}\n                data-testid=\"nav-chat-desktop\"\n              >\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Chat\n              </Button>\n            </Link>\n            <Link href=\"/beds\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={cn(location === \"/beds\" && \"bg-accent\")}\n                data-testid=\"nav-beds-desktop\"\n              >\n                <Grid3x3 className=\"h-4 w-4 mr-2\" />\n                Beds\n              </Button>\n            </Link>\n          </nav>\n          <ThemeToggle />\n        </div>\n      </header>\n\n      <div className=\"flex-1 overflow-y-auto px-4 py-6\" data-testid=\"chat-messages-container\">\n        <div className=\"max-w-4xl mx-auto\">\n          {messages.map((message) => (\n            <ChatMessage\n              key={message.id}\n              role={message.role}\n              content={message.content}\n              timestamp={message.timestamp}\n            />\n          ))}\n          {chatMutation.isPending && <TypingIndicator />}\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n\n      <ChatInput\n        onSendMessage={handleSendMessage}\n        onUploadPhoto={() => setShowPhotoUpload(true)}\n        disabled={chatMutation.isPending}\n      />\n\n      <Dialog open={showPhotoUpload} onOpenChange={setShowPhotoUpload}>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Upload Plant Photo</DialogTitle>\n          </DialogHeader>\n          <PhotoUpload onPhotoSelect={handlePhotoUpload} />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13569},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/storage.ts":{"content":"import {\n  users,\n  gardenBeds,\n  plants,\n  conversations,\n  type User,\n  type InsertUser,\n  type GardenBed,\n  type InsertGardenBed,\n  type Plant,\n  type InsertPlant,\n  type Conversation,\n  type InsertConversation,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserLastActive(id: string): Promise<void>;\n\n  // Garden bed operations\n  getGardenBed(id: string): Promise<GardenBed | undefined>;\n  getGardenBedsByUser(userId: string): Promise<GardenBed[]>;\n  createGardenBed(bed: InsertGardenBed): Promise<GardenBed>;\n  updateGardenBed(id: string, bed: Partial<InsertGardenBed>): Promise<GardenBed>;\n  deleteGardenBed(id: string): Promise<void>;\n\n  // Plant operations\n  getPlant(id: string): Promise<Plant | undefined>;\n  getPlantsByBed(bedId: string): Promise<Plant[]>;\n  createPlant(plant: InsertPlant): Promise<Plant>;\n  updatePlant(id: string, plant: Partial<InsertPlant>): Promise<Plant>;\n  deletePlant(id: string): Promise<void>;\n\n  // Conversation operations\n  getConversation(userId: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: string, conversation: Partial<InsertConversation>): Promise<Conversation>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUserLastActive(id: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ lastActive: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  // Garden bed operations\n  async getGardenBed(id: string): Promise<GardenBed | undefined> {\n    const [bed] = await db.select().from(gardenBeds).where(eq(gardenBeds.id, id));\n    return bed || undefined;\n  }\n\n  async getGardenBedsByUser(userId: string): Promise<GardenBed[]> {\n    return await db\n      .select()\n      .from(gardenBeds)\n      .where(eq(gardenBeds.userId, userId))\n      .orderBy(desc(gardenBeds.lastUpdated));\n  }\n\n  async createGardenBed(bed: InsertGardenBed): Promise<GardenBed> {\n    const [gardenBed] = await db.insert(gardenBeds).values(bed).returning();\n    return gardenBed;\n  }\n\n  async updateGardenBed(id: string, bed: Partial<InsertGardenBed>): Promise<GardenBed> {\n    const [updated] = await db\n      .update(gardenBeds)\n      .set({ ...bed, lastUpdated: new Date() })\n      .where(eq(gardenBeds.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteGardenBed(id: string): Promise<void> {\n    await db.delete(gardenBeds).where(eq(gardenBeds.id, id));\n  }\n\n  // Plant operations\n  async getPlant(id: string): Promise<Plant | undefined> {\n    const [plant] = await db.select().from(plants).where(eq(plants.id, id));\n    return plant || undefined;\n  }\n\n  async getPlantsByBed(bedId: string): Promise<Plant[]> {\n    return await db\n      .select()\n      .from(plants)\n      .where(eq(plants.bedId, bedId))\n      .orderBy(desc(plants.lastUpdated));\n  }\n\n  async createPlant(plant: InsertPlant): Promise<Plant> {\n    const [newPlant] = await db.insert(plants).values(plant).returning();\n    return newPlant;\n  }\n\n  async updatePlant(id: string, plant: Partial<InsertPlant>): Promise<Plant> {\n    const [updated] = await db\n      .update(plants)\n      .set({ ...plant, lastUpdated: new Date() })\n      .where(eq(plants.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePlant(id: string): Promise<void> {\n    await db.delete(plants).where(eq(plants.id, id));\n  }\n\n  // Conversation operations\n  async getConversation(userId: string): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.lastUpdated))\n      .limit(1);\n    return conversation || undefined;\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const [newConversation] = await db.insert(conversations).values(conversation).returning();\n    return newConversation;\n  }\n\n  async updateConversation(\n    id: string,\n    conversation: Partial<InsertConversation>\n  ): Promise<Conversation> {\n    const [updated] = await db\n      .update(conversations)\n      .set({ ...conversation, lastUpdated: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return updated;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":5066},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/GardenBedCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sun, Droplet, Ruler, Plus, ExternalLink } from \"lucide-react\";\n\ninterface Plant {\n  id: string;\n  commonName: string;\n  quantity: number;\n  healthStatus: \"thriving\" | \"ok\" | \"struggling\" | \"dead\";\n  imageUrl?: string;\n}\n\ninterface GardenBedCardProps {\n  bedName: string;\n  sunExposure?: string;\n  soilMoisture?: string;\n  bedSize?: number;\n  plants: Plant[];\n  onAddPlant: () => void;\n  onViewDetails: () => void;\n}\n\nexport function GardenBedCard({\n  bedName,\n  sunExposure,\n  soilMoisture,\n  bedSize,\n  plants,\n  onAddPlant,\n  onViewDetails,\n}: GardenBedCardProps) {\n  const getHealthColor = (status: Plant[\"healthStatus\"]) => {\n    switch (status) {\n      case \"thriving\":\n        return \"bg-chart-2\";\n      case \"ok\":\n        return \"bg-chart-4\";\n      case \"struggling\":\n        return \"bg-destructive\";\n      case \"dead\":\n        return \"bg-muted-foreground\";\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-bed-${bedName.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2 gap-2\">\n        <CardTitle className=\"font-display text-xl\" data-testid=\"text-bed-name\">{bedName}</CardTitle>\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={onViewDetails}\n          data-testid=\"button-view-details\"\n        >\n          <ExternalLink className=\"h-4 w-4\" />\n        </Button>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-wrap gap-3 text-sm\">\n          {sunExposure && (\n            <div className=\"flex items-center gap-1.5\">\n              <Sun className=\"h-4 w-4 text-chart-4\" />\n              <span className=\"text-muted-foreground\" data-testid=\"text-sun-exposure\">{sunExposure}</span>\n            </div>\n          )}\n          {soilMoisture && (\n            <div className=\"flex items-center gap-1.5\">\n              <Droplet className=\"h-4 w-4 text-chart-3\" />\n              <span className=\"text-muted-foreground\" data-testid=\"text-soil-moisture\">{soilMoisture}</span>\n            </div>\n          )}\n          {bedSize && (\n            <div className=\"flex items-center gap-1.5\">\n              <Ruler className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-muted-foreground\" data-testid=\"text-bed-size\">{bedSize} sq ft</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          {plants.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground py-4 text-center\">No plants yet</p>\n          ) : (\n            plants.map((plant) => (\n              <div\n                key={plant.id}\n                className=\"flex items-center gap-3 p-2 rounded-md border border-border hover-elevate\"\n                data-testid={`plant-item-${plant.id}`}\n              >\n                {plant.imageUrl && (\n                  <div className=\"w-10 h-10 rounded-md bg-muted flex-shrink-0 overflow-hidden\">\n                    <img\n                      src={plant.imageUrl}\n                      alt={plant.commonName}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                )}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium truncate\" data-testid={`text-plant-name-${plant.id}`}>\n                    {plant.commonName}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Quantity: {plant.quantity}\n                  </p>\n                </div>\n                <div\n                  className={`h-2.5 w-2.5 rounded-full flex-shrink-0 ${getHealthColor(plant.healthStatus)} ${\n                    plant.healthStatus === \"thriving\" ? \"animate-pulse\" : \"\"\n                  }`}\n                  data-testid={`status-${plant.healthStatus}`}\n                  title={plant.healthStatus}\n                />\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n\n      <CardFooter>\n        <Button\n          variant=\"outline\"\n          onClick={onAddPlant}\n          className=\"w-full gap-2\"\n          data-testid=\"button-add-plant\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Add Plant\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":4514},"client/src/components/examples/GardenBedCard.tsx":{"content":"import { GardenBedCard } from \"../GardenBedCard\";\n\nexport default function GardenBedCardExample() {\n  const herbGarden = {\n    bedName: \"Herb Garden\",\n    sunExposure: \"Full sun\",\n    soilMoisture: \"Medium\",\n    bedSize: 12,\n    plants: [\n      {\n        id: \"1\",\n        commonName: \"Lavender\",\n        quantity: 3,\n        healthStatus: \"thriving\" as const,\n      },\n      {\n        id: \"2\",\n        commonName: \"Rosemary\",\n        quantity: 2,\n        healthStatus: \"thriving\" as const,\n      },\n      {\n        id: \"3\",\n        commonName: \"Basil\",\n        quantity: 5,\n        healthStatus: \"ok\" as const,\n      },\n    ],\n  };\n\n  const shadyCorner = {\n    bedName: \"Shady Corner\",\n    sunExposure: \"Full shade\",\n    soilMoisture: \"Moist\",\n    bedSize: 8,\n    plants: [\n      {\n        id: \"4\",\n        commonName: \"Hostas\",\n        quantity: 4,\n        healthStatus: \"thriving\" as const,\n      },\n    ],\n  };\n\n  const emptyBed = {\n    bedName: \"Front Yard Border\",\n    sunExposure: \"Partial sun\",\n    plants: [],\n  };\n\n  return (\n    <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 p-4\">\n      <GardenBedCard\n        {...herbGarden}\n        onAddPlant={() => console.log(\"Add plant to Herb Garden\")}\n        onViewDetails={() => console.log(\"View Herb Garden details\")}\n      />\n      <GardenBedCard\n        {...shadyCorner}\n        onAddPlant={() => console.log(\"Add plant to Shady Corner\")}\n        onViewDetails={() => console.log(\"View Shady Corner details\")}\n      />\n      <GardenBedCard\n        {...emptyBed}\n        onAddPlant={() => console.log(\"Add plant to Front Yard\")}\n        onViewDetails={() => console.log(\"View Front Yard details\")}\n      />\n    </div>\n  );\n}\n","size_bytes":1692},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/TypingIndicator.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Sprout } from \"lucide-react\";\n\nexport function TypingIndicator() {\n  return (\n    <div className=\"flex gap-3 mb-4\" data-testid=\"typing-indicator\">\n      <Avatar className=\"h-8 w-8 flex-shrink-0\">\n        <AvatarFallback className=\"bg-primary text-primary-foreground\">\n          <Sprout className=\"h-4 w-4\" />\n        </AvatarFallback>\n      </Avatar>\n\n      <div className=\"bg-card border border-card-border rounded-2xl px-4 py-3 flex items-center gap-1\">\n        <div className=\"flex gap-1\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce [animation-delay:-0.3s]\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce [animation-delay:-0.15s]\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":920},"client/src/components/PhotoUpload.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { Upload, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PhotoUploadProps {\n  onPhotoSelect: (file: File) => void;\n  disabled?: boolean;\n}\n\nexport function PhotoUpload({ onPhotoSelect, disabled }: PhotoUploadProps) {\n  const [preview, setPreview] = useState<string | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n\n  const handleFile = useCallback(\n    (file: File) => {\n      if (file && file.type.startsWith(\"image/\")) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          setPreview(e.target?.result as string);\n        };\n        reader.readAsDataURL(file);\n        onPhotoSelect(file);\n      }\n    },\n    [onPhotoSelect]\n  );\n\n  const handleDrag = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  }, []);\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setDragActive(false);\n\n      if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n        handleFile(e.dataTransfer.files[0]);\n      }\n    },\n    [handleFile]\n  );\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if (e.target.files && e.target.files[0]) {\n      handleFile(e.target.files[0]);\n    }\n  };\n\n  const clearPhoto = () => {\n    setPreview(null);\n  };\n\n  if (preview) {\n    return (\n      <div className=\"relative rounded-lg overflow-hidden max-h-80\" data-testid=\"preview-container\">\n        <img\n          src={preview}\n          alt=\"Plant preview\"\n          className=\"w-full h-full object-contain bg-muted\"\n          data-testid=\"img-preview\"\n        />\n        <Button\n          size=\"icon\"\n          variant=\"destructive\"\n          className=\"absolute top-2 right-2\"\n          onClick={clearPhoto}\n          data-testid=\"button-clear-photo\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        \"relative rounded-xl border-2 border-dashed p-12 text-center transition-colors\",\n        dragActive\n          ? \"border-primary bg-primary/5\"\n          : \"border-border hover:border-primary hover:bg-primary/5\",\n        disabled && \"opacity-50 cursor-not-allowed\"\n      )}\n      onDragEnter={handleDrag}\n      onDragLeave={handleDrag}\n      onDragOver={handleDrag}\n      onDrop={handleDrop}\n      data-testid=\"dropzone\"\n    >\n      <input\n        type=\"file\"\n        id=\"photo-upload\"\n        className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n        onChange={handleChange}\n        accept=\"image/*\"\n        disabled={disabled}\n        data-testid=\"input-file\"\n      />\n      <div className=\"flex flex-col items-center gap-3 pointer-events-none\">\n        <Upload className=\"h-12 w-12 text-primary/40\" />\n        <div className=\"space-y-1\">\n          <p className=\"text-sm font-medium\">Drop photo or click to upload</p>\n          <p className=\"text-xs text-muted-foreground\">\n            Upload a clear photo of your plant\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3359},"client/src/components/examples/ChatMessage.tsx":{"content":"import { ChatMessage } from \"../ChatMessage\";\n\nexport default function ChatMessageExample() {\n  return (\n    <div className=\"space-y-4 p-4 max-w-4xl mx-auto\">\n      <ChatMessage\n        role=\"assistant\"\n        content=\"Hi! 👋 I'm your AI garden assistant. I can help you catalog your plants by identifying them from photos or just chatting about what's in your garden.\"\n        timestamp=\"2:34 PM\"\n      />\n      <ChatMessage\n        role=\"user\"\n        content=\"I have some lavender and rosemary in my herb garden\"\n        timestamp=\"2:35 PM\"\n      />\n      <ChatMessage\n        role=\"assistant\"\n        content=\"Nice! 🌿 Lavender and rosemary are great together - both love sun and don't need much water. Let me set this up for you.\"\n        timestamp=\"2:35 PM\"\n      />\n    </div>\n  );\n}\n","size_bytes":796},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = storedTheme || (prefersDark ? \"dark\" : \"light\");\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"Toggle theme\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1166},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/examples/TypingIndicator.tsx":{"content":"import { TypingIndicator } from \"../TypingIndicator\";\n\nexport default function TypingIndicatorExample() {\n  return (\n    <div className=\"p-4\">\n      <TypingIndicator />\n    </div>\n  );\n}\n","size_bytes":187},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, real } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  location: text(\"location\"),\n  yardSize: text(\"yard_size\"),\n  experienceLevel: text(\"experience_level\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  lastActive: timestamp(\"last_active\").defaultNow().notNull(),\n});\n\nexport const gardenBeds = pgTable(\"garden_beds\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  bedName: text(\"bed_name\").notNull(),\n  bedSizeSqft: real(\"bed_size_sqft\"),\n  sunExposure: text(\"sun_exposure\"),\n  soilType: text(\"soil_type\"),\n  soilMoisture: text(\"soil_moisture\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n});\n\nexport const plants = pgTable(\"plants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bedId: varchar(\"bed_id\").notNull().references(() => gardenBeds.id),\n  commonName: text(\"common_name\").notNull(),\n  scientificName: text(\"scientific_name\"),\n  plantType: text(\"plant_type\"),\n  datePlanted: text(\"date_planted\"),\n  imageUrl: text(\"image_url\"),\n  quantity: integer(\"quantity\").default(1),\n  spacingInches: real(\"spacing_inches\"),\n  currentHeight: text(\"current_height\"),\n  healthStatus: text(\"health_status\"),\n  identificationConfidence: integer(\"identification_confidence\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  messages: text(\"messages\").notNull(),\n  context: text(\"context\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow().notNull(),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  gardenBeds: many(gardenBeds),\n  conversations: many(conversations),\n}));\n\nexport const gardenBedsRelations = relations(gardenBeds, ({ one, many }) => ({\n  user: one(users, {\n    fields: [gardenBeds.userId],\n    references: [users.id],\n  }),\n  plants: many(plants),\n}));\n\nexport const plantsRelations = relations(plants, ({ one }) => ({\n  gardenBed: one(gardenBeds, {\n    fields: [plants.bedId],\n    references: [gardenBeds.id],\n  }),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one }) => ({\n  user: one(users, {\n    fields: [conversations.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  lastActive: true,\n});\n\nexport const insertGardenBedSchema = createInsertSchema(gardenBeds).omit({\n  id: true,\n  createdAt: true,\n  lastUpdated: true,\n});\n\nexport const insertPlantSchema = createInsertSchema(plants).omit({\n  id: true,\n  createdAt: true,\n  lastUpdated: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  lastUpdated: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertGardenBed = z.infer<typeof insertGardenBedSchema>;\nexport type GardenBed = typeof gardenBeds.$inferSelect;\n\nexport type InsertPlant = z.infer<typeof insertPlantSchema>;\nexport type Plant = typeof plants.$inferSelect;\n\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\n","size_bytes":3996},"client/src/components/examples/PlantIdentificationCard.tsx":{"content":"import { PlantIdentificationCard } from \"../PlantIdentificationCard\";\n\nexport default function PlantIdentificationCardExample() {\n  const highConfidencePlant = {\n    commonName: \"Lavender\",\n    scientificName: \"Lavandula angustifolia\",\n    confidence: 92,\n    type: \"Perennial\",\n    lightNeeds: \"Full sun\",\n    matureSize: \"18-24 inches\",\n  };\n\n  const mediumConfidencePlant = {\n    commonName: \"Salvia\",\n    scientificName: \"Salvia officinalis\",\n    confidence: 68,\n  };\n\n  const alternatives = [\n    { commonName: \"Catmint\", scientificName: \"Nepeta\", confidence: 18 },\n    { commonName: \"Russian Sage\", scientificName: \"Perovskia\", confidence: 14 },\n  ];\n\n  return (\n    <div className=\"grid md:grid-cols-2 gap-6 p-4 max-w-4xl mx-auto\">\n      <PlantIdentificationCard\n        plant={highConfidencePlant}\n        onAddToGarden={() => console.log(\"Add high confidence plant\")}\n      />\n      <PlantIdentificationCard\n        plant={mediumConfidencePlant}\n        alternatives={alternatives}\n        onAddToGarden={() => console.log(\"Add medium confidence plant\")}\n        onSelectAlternative={(alt) => console.log(\"Selected alternative:\", alt.commonName)}\n      />\n    </div>\n  );\n}\n","size_bytes":1183},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/examples/ChatInput.tsx":{"content":"import { ChatInput } from \"../ChatInput\";\n\nexport default function ChatInputExample() {\n  return (\n    <div className=\"h-40\">\n      <ChatInput\n        onSendMessage={(msg) => console.log(\"Send message:\", msg)}\n        onUploadPhoto={() => console.log(\"Upload photo clicked\")}\n      />\n    </div>\n  );\n}\n","size_bytes":303},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/PlantIdentificationCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sun, Droplet, Ruler } from \"lucide-react\";\n\ninterface PlantDetails {\n  commonName: string;\n  scientificName: string;\n  confidence: number;\n  type?: string;\n  lightNeeds?: string;\n  matureSize?: string;\n  imageUrl?: string;\n}\n\ninterface PlantIdentificationCardProps {\n  plant: PlantDetails;\n  alternatives?: PlantDetails[];\n  onAddToGarden: () => void;\n  onSelectAlternative?: (plant: PlantDetails) => void;\n}\n\nexport function PlantIdentificationCard({\n  plant,\n  alternatives,\n  onAddToGarden,\n  onSelectAlternative,\n}: PlantIdentificationCardProps) {\n  const isHighConfidence = plant.confidence >= 85;\n  const isMediumConfidence = plant.confidence >= 60 && plant.confidence < 85;\n\n  const getConfidenceBadge = (confidence: number) => {\n    if (confidence >= 85) {\n      return (\n        <Badge className=\"bg-chart-2 text-white border-chart-2\" data-testid=\"badge-confidence-high\">\n          ✓ {confidence}% Match\n        </Badge>\n      );\n    } else if (confidence >= 60) {\n      return (\n        <Badge variant=\"outline\" className=\"bg-chart-4/20 border-chart-4 text-foreground\" data-testid=\"badge-confidence-medium\">\n          ~ {confidence}% Match\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge variant=\"outline\" className=\"bg-muted\" data-testid=\"badge-confidence-low\">\n          ? {confidence}% Match\n        </Badge>\n      );\n    }\n  };\n\n  return (\n    <Card className=\"overflow-hidden\" data-testid=\"card-plant-identification\">\n      {plant.imageUrl && (\n        <div className=\"relative aspect-square bg-muted\">\n          <img\n            src={plant.imageUrl}\n            alt={plant.commonName}\n            className=\"w-full h-full object-cover\"\n            data-testid=\"img-plant\"\n          />\n          <div className=\"absolute top-2 right-2\">\n            {getConfidenceBadge(plant.confidence)}\n          </div>\n        </div>\n      )}\n\n      <CardHeader>\n        <CardTitle className=\"font-display text-2xl text-primary\" data-testid=\"text-plant-name\">\n          {plant.commonName}\n        </CardTitle>\n        {plant.scientificName && (\n          <p className=\"text-sm font-mono italic text-muted-foreground\" data-testid=\"text-scientific-name\">\n            {plant.scientificName}\n          </p>\n        )}\n      </CardHeader>\n\n      {isHighConfidence && (\n        <CardContent className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            {plant.type && (\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-muted-foreground\">Type:</span>\n                <span className=\"font-medium\" data-testid=\"text-plant-type\">{plant.type}</span>\n              </div>\n            )}\n            {plant.lightNeeds && (\n              <div className=\"flex items-center gap-2\">\n                <Sun className=\"h-4 w-4 text-chart-4\" />\n                <span data-testid=\"text-light-needs\">{plant.lightNeeds}</span>\n              </div>\n            )}\n            {plant.matureSize && (\n              <div className=\"flex items-center gap-2\">\n                <Ruler className=\"h-4 w-4 text-muted-foreground\" />\n                <span data-testid=\"text-mature-size\">{plant.matureSize}</span>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      )}\n\n      {isMediumConfidence && alternatives && alternatives.length > 0 && (\n        <CardContent className=\"space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">It could also be:</p>\n          <div className=\"space-y-2\">\n            {alternatives.map((alt, index) => (\n              <button\n                key={index}\n                onClick={() => onSelectAlternative?.(alt)}\n                className=\"w-full text-left p-2 rounded-md border border-border hover-elevate active-elevate-2\"\n                data-testid={`button-alternative-${index}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-sm\">{alt.commonName}</span>\n                  <span className=\"text-xs text-muted-foreground\">{alt.confidence}% match</span>\n                </div>\n              </button>\n            ))}\n          </div>\n        </CardContent>\n      )}\n\n      <CardFooter>\n        <Button onClick={onAddToGarden} className=\"w-full\" data-testid=\"button-add-to-garden\">\n          Add to Garden Catalog\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":4601},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ChatMessage.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Sprout, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChatMessageProps {\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp?: string;\n}\n\nexport function ChatMessage({ role, content, timestamp }: ChatMessageProps) {\n  const isUser = role === \"user\";\n\n  return (\n    <div\n      className={cn(\n        \"flex gap-3 mb-4\",\n        isUser ? \"justify-end\" : \"justify-start\"\n      )}\n      data-testid={`message-${role}`}\n    >\n      {!isUser && (\n        <Avatar className=\"h-8 w-8 flex-shrink-0\" data-testid=\"avatar-bot\">\n          <AvatarFallback className=\"bg-primary text-primary-foreground\">\n            <Sprout className=\"h-4 w-4\" />\n          </AvatarFallback>\n        </Avatar>\n      )}\n\n      <div\n        className={cn(\n          \"flex flex-col gap-1\",\n          isUser ? \"items-end max-w-md\" : \"items-start max-w-lg\"\n        )}\n      >\n        <div\n          className={cn(\n            \"rounded-2xl px-4 py-3 text-base\",\n            isUser\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-card border border-card-border text-card-foreground\"\n          )}\n          data-testid={`bubble-${role}`}\n        >\n          {content}\n        </div>\n        {timestamp && (\n          <span className=\"text-xs text-muted-foreground px-1\" data-testid=\"message-timestamp\">\n            {timestamp}\n          </span>\n        )}\n      </div>\n\n      {isUser && (\n        <Avatar className=\"h-8 w-8 flex-shrink-0\" data-testid=\"avatar-user\">\n          <AvatarFallback className=\"bg-accent text-accent-foreground\">\n            <User className=\"h-4 w-4\" />\n          </AvatarFallback>\n        </Avatar>\n      )}\n    </div>\n  );\n}\n","size_bytes":1749},"client/src/App.tsx":{"content":"import { Switch, Route, Link, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { UserProvider } from \"@/lib/userContext\";\nimport ChatPage from \"@/pages/ChatPage\";\nimport BedsPage from \"@/pages/BedsPage\";\nimport NotFound from \"@/pages/not-found\";\nimport { MessageSquare, Grid3x3 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport logoUrl from \"@/assets/clorofil-logo.png\";\n\nfunction Header() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Chat\", icon: MessageSquare },\n    { path: \"/beds\", label: \"Beds\", icon: Grid3x3 },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80\">\n      <div className=\"container flex items-center justify-between h-16 px-4 mx-auto\">\n        <Link href=\"/\" className=\"flex items-center gap-3 hover-elevate px-2 py-1 rounded-md transition-all\" data-testid=\"link-home\">\n          <img src={logoUrl} alt=\"Clorofil\" className=\"h-8 w-auto\" />\n          <span className=\"text-xl font-bold text-foreground\">Clorofil</span>\n        </Link>\n        \n        <nav className=\"hidden lg:flex items-center gap-6\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={cn(\n                  \"flex items-center gap-2 px-3 py-2 rounded-md transition-colors hover-elevate\",\n                  isActive ? \"text-primary font-medium\" : \"text-muted-foreground\"\n                )}\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nfunction BottomNav() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Chat\", icon: MessageSquare },\n    { path: \"/beds\", label: \"Beds\", icon: Grid3x3 },\n  ];\n\n  return (\n    <nav className=\"lg:hidden fixed bottom-0 left-0 right-0 border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80 z-50\">\n      <div className=\"flex items-center justify-around h-16\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          return (\n            <Link\n              key={item.path}\n              href={item.path}\n              className={cn(\n                \"flex flex-col items-center justify-center flex-1 h-full gap-1 transition-colors\",\n                isActive ? \"text-primary\" : \"text-muted-foreground hover:text-foreground\"\n              )}\n              data-testid={`nav-${item.label.toLowerCase()}`}\n            >\n              <Icon className={cn(\"h-5 w-5\", isActive && \"fill-current\")} />\n              <span className=\"text-xs font-medium\">{item.label}</span>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n\nfunction Router() {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={ChatPage} />\n        <Route path=\"/beds\" component={BedsPage} />\n        <Route component={NotFound} />\n      </Switch>\n      <BottomNav />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <UserProvider>\n          <div className=\"pb-16 lg:pb-0 min-h-screen flex flex-col\">\n            <Router />\n          </div>\n        </UserProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3894}},"version":2}